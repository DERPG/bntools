{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./src/pages/sprite-exporter.tsx"],"names":["_assertThisInitialized","self","ReferenceError","Data","array","this","read_8","address","read_16","Palette","value","index","high","color","true","map","x","SpriteExporter","props","state","image","canvasRef","React","createRef","loadFile","bind","load","event","console","log","reader","FileReader","readAsArrayBuffer","target","files","onloadend","ev","Uint8Array","result","data","buffer","Array","i","palette","ctx","current","getContext","t","imageData","getImageData","Math","floor","byte","p1","p2","l","putImageData","render","type","onChange","ref","width","height","Component"],"mappings":"2FAAe,SAASA,EAAuBC,GAC7C,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAG3B,OAAOD,E,4CCHHE,E,WAGJ,WAAYC,GACVC,KAAKD,MAAQA,E,2BAGfE,OAAA,SAAOC,GACL,OAAOF,KAAKD,MAAMG,I,EAGpBC,QAAA,SAAQD,GACN,OAAOF,KAAKD,MAAMG,IAAYF,KAAKD,MAAMG,EAAU,IAAM,I,KAIvDE,E,WAGJ,WAAYL,GACVC,KAAKD,MAAQA,E,2BAGfM,MAAA,SAAMC,GACJ,OAAON,KAAKD,MAAMO,I,EAGpBC,KAAA,SAAKD,GACH,IAAME,EAAQR,KAAKK,MAAMC,GAIzB,MAAO,CAHW,GAARE,GACS,IAARA,IAAkB,GACV,MAARA,IAAmB,K,EAIhCC,KAAA,SAAKH,GACH,OAAON,KAAKO,KAAKD,GAAOI,KAAI,SAAAC,GAAC,OAAQ,EAAJA,M,KAI/BC,E,YAGJ,WAAYC,GAAO,aACjB,cAAMA,IAAN,MACKC,MAAQ,CACXC,MAAO,MAGT,EAAKC,UAAYC,IAAMC,YAEvB,EAAKC,SAAW,EAAKA,SAASC,KAAd,MAChB,EAAKC,KAAO,EAAKA,KAAKD,KAAV,MATK,E,4CAYnBD,SAAA,SAASG,GAAO,WACdC,QAAQC,IAAI,eAEZ,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,kBAAkBL,EAAMM,OAAOC,MAAM,IAC5CJ,EAAOK,UAAY,SAACC,GAClB,IAAMhC,EAAQ,IAAIiC,WAAWD,EAAGH,OAAOK,QACjCC,EAAO,IAAIpC,EAAKC,GAEtB,EAAKsB,KAAKa,K,EAIdb,KAAA,SAAKa,GAGH,IAFA,IACMC,EAAS,IAAIC,MAAM,IAChBC,EAAI,EAAGA,EAAI,GAAIA,IACtBF,EAAOE,GAAKH,EAAK/B,QAHU,QAGyB,EAAJkC,GAuBlD,IApBA,IAAMC,EAAU,IAAIlC,EAAQ+B,GAEtBI,EAAMvC,KAAKgB,UAAUwB,QAAQC,WAAW,MAkBrCC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAG3B,IAFA,IAAMC,EAAYJ,EAAIK,aAAiB,EAAJF,EAAQ,GAAwB,EAApBG,KAAKC,MAAMJ,EAAI,GAAQ,EAAG,GAEhEL,EAAI,EAAGA,EAAI,GAAMA,IAAK,CAC7B,IAAMU,EAAOb,EAAKjC,OALT,QAK2B,GAAJyC,EAAWL,GACrCW,EAAKV,EAAQ7B,KAAY,GAAPsC,GAClBE,EAAKX,EAAQ7B,MAAa,IAAPsC,IAAgB,GAErCG,EAAQ,EAAJb,EACRM,EAAUT,KAAKgB,EAAI,GAAKF,EAAG,GAC3BL,EAAUT,KAAKgB,EAAI,GAAKF,EAAG,GAC3BL,EAAUT,KAAKgB,EAAI,GAAKF,EAAG,GAC3BL,EAAUT,KAAKgB,EAAI,GAAK,IAExBP,EAAUT,KAAKgB,EAAI,GAAKD,EAAG,GAC3BN,EAAUT,KAAKgB,EAAI,GAAKD,EAAG,GAC3BN,EAAUT,KAAKgB,EAAI,GAAKD,EAAG,GAC3BN,EAAUT,KAAKgB,EAAI,GAAK,IAG1BX,EAAIY,aAAaR,EAAe,EAAJD,EAAQ,GAAwB,EAApBG,KAAKC,MAAMJ,EAAI,IAGzDnB,QAAQC,IAAI,mB,EAGd4B,OAAA,WACE,OACE,6BACE,+CACA,2BAAOC,KAAK,OAAOC,SAAUtD,KAAKmB,WAClC,4BAAQoC,IAAKvD,KAAKgB,UAAWwC,MAAO,IAAKC,OAAQ,O,GAtF5BxC,IAAMyC,WA4FpB9C","file":"component---src-pages-sprite-exporter-tsx-9466d52725a39b459e84.js","sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React from \"react\"\n\nclass Data {\n  array: Uint8Array;\n\n  constructor(array: Uint8Array) {\n    this.array = array;\n  }\n\n  read_8(address) {\n    return this.array[address];\n  }\n\n  read_16(address) {\n    return this.array[address] + (this.array[address + 1] << 8);\n  }\n}\n\nclass Palette {\n  array: any;\n\n  constructor(array: any) {\n    this.array = array;\n  }\n\n  value(index) {\n    return this.array[index];\n  }\n\n  high(index) {\n    const color = this.value(index);\n    const r = color & 0x1f;\n    const g = (color & 0x3e0) >> 5;\n    const b = (color & 0x7c00) >> 10;\n    return [r, g, b];\n  }\n\n  true(index) {\n    return this.high(index).map(x => x * 8);\n  }\n}\n\nclass SpriteExporter extends React.Component {\n  private canvasRef: React.RefObject<HTMLCanvasElement>\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: null\n    };\n\n    this.canvasRef = React.createRef();\n\n    this.loadFile = this.loadFile.bind(this);\n    this.load = this.load.bind(this);\n  }\n\n  loadFile(event) {\n    console.log('loaded file');\n\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(event.target.files[0]);\n    reader.onloadend = (ev) => {\n      const array = new Uint8Array(ev.target.result);\n      const data = new Data(array);\n\n      this.load(data);\n    };\n  }\n\n  load(data: Data) {\n    const PALETTE_BASE_ADDRESS = 0x3cace4;\n    const buffer = new Array(16);\n    for (let i = 0; i < 16; i++) {\n      buffer[i] = data.read_16(PALETTE_BASE_ADDRESS + i * 2);\n    }\n\n    const palette = new Palette(buffer);\n\n    const ctx = this.canvasRef.current.getContext('2d');\n\n    // const imageData = ctx.getImageData(0, 0, 256, 16);\n    // for (let i = 0; i < 16; i++) {\n    //   for (let x = 0; x < 16; x++) {\n    //     for (let y = 0; y < 16; y++) {\n    //       const idx = (y * 256 + (16 * i + x)) * 4;\n    //       imageData.data[idx] = palette.true(i)[0];\n    //       imageData.data[idx + 1] = palette.true(i)[1];\n    //       imageData.data[idx + 2] = palette.true(i)[2];\n    //       imageData.data[idx + 3] = 0xff;\n    //     }\n    //   }\n    //   console.log(palette.high(i));\n    // }\n    // ctx.putImageData(imageData, 0, 0);\n\n    const base = 0x3c0798;\n    for (let t = 0; t < 10; t++) {\n      const imageData = ctx.getImageData(t * 8 % 16, Math.floor(t / 2) * 8, 8, 8);\n\n      for (let i = 0; i < 0x20; i++) {\n        const byte = data.read_8(base + t * 0x20 + i);\n        const p1 = palette.true(byte & 0x0F);\n        const p2 = palette.true((byte & 0xF0) >> 4);\n\n        let l = i * 8;\n        imageData.data[l + 0] = p1[0];\n        imageData.data[l + 1] = p1[1];\n        imageData.data[l + 2] = p1[2];\n        imageData.data[l + 3] = 0xff;\n\n        imageData.data[l + 4] = p2[0];\n        imageData.data[l + 5] = p2[1];\n        imageData.data[l + 6] = p2[2];\n        imageData.data[l + 7] = 0xff;\n      }\n\n      ctx.putImageData(imageData, t * 8 % 16, Math.floor(t / 2) * 8);\n    }\n\n    console.log('loaded palette');\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Sprite exporter</h2>\n        <input type=\"file\" onChange={this.loadFile} />\n        <canvas ref={this.canvasRef} width={256} height={64} />\n      </div>\n    );\n  }\n}\n\nexport default SpriteExporter\n"],"sourceRoot":""}