{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./src/pages/sprite-exporter.tsx"],"names":["_assertThisInitialized","self","ReferenceError","Data","array","this","read8","address","read16","read32","DataReader","data","cursor","base","reset","newBase","newCursor","setCursor","ret","Frame","tilemap","palette","oams","Tilemap","tiles","OamSize","width","height","total","oamSizes","Palette","value","index","high","color","true","map","x","readTilemap","reader","tilesCount","Array","i","tile","byte","first","second","readPalette","readOams","start","startTile","offsetX","offsetY","size","shape","oam","hflip","vflip","push","SpriteExporter","props","state","image","canvasRef","React","createRef","loadFile","bind","load","readSprite","event","console","log","FileReader","readAsArrayBuffer","target","files","onloadend","ev","Uint8Array","result","canvas","current","ctx","getContext","clearRect","animationCount","animationPointers","frames","tilemapPointer","palettePointer","oamPointer","forEach","frame","f","tox","toy","y","canvasX","canvasY","Math","floor","imageData","getImageData","pixels","t","ly","lx","pi","w","offset","j","length","idx","pixel","putImageData","render","type","onChange","defaultValue","ref","Component"],"mappings":"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","file":"component---src-pages-sprite-exporter-tsx-946ea81c4c700c933f3b.js","sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React, { ChangeEvent } from \"react\"\n\nclass Data {\n  private array: Uint8Array;\n\n  constructor(array: Uint8Array) {\n    this.array = array;\n  }\n\n  read8(address): number {\n    return this.array[address];\n  }\n\n  read16(address): number {\n    return this.array[address] + (this.array[address + 1] << 8);\n  }\n\n  read32(address): number {\n    return this.array[address] + (this.array[address + 1] << 8) + (this.array[address + 2] << 16) + (this.array[address + 3] << 24);\n  }\n}\n\nclass DataReader {\n  private data: Data;\n  private cursor: number;\n  private base: number;\n\n  constructor(data: Data) {\n    this.data = data;\n    this.cursor = 0;\n    this.base = 0;\n  }\n\n  reset(newBase: number, newCursor: number): void {\n    this.base = newBase;\n    this.cursor = newCursor;\n  }\n\n  setCursor(newCursor: number): void {\n    this.cursor = newCursor;\n  }\n\n  read8(): number {\n    const ret = this.data.read8(this.base + this.cursor);\n    this.cursor += 1;\n    return ret;\n  }\n\n  read16(): number {\n    const ret = this.data.read16(this.base + this.cursor);\n    this.cursor += 2;\n    return ret;\n  }\n\n  read32(): number {\n    const ret = this.data.read32(this.base + this.cursor);\n    this.cursor += 4;\n    return ret;\n  }\n}\n\nclass Sprite {\n  animations: Animation[];\n}\n\nclass Animation {\n  frames: Frame[];\n}\n\nclass Frame {\n  tilemap: Tilemap;\n  palette: Palette;\n  oams: Oam[];\n\n  constructor(tilemap: Tilemap, palette: Palette, oams: Oam[]) {\n    this.tilemap = tilemap;\n    this.palette = palette;\n    this.oams = oams;\n  }\n}\n\nclass Tilemap {\n  tiles: number[][];\n\n  constructor(tiles: number[][]) {\n    this.tiles = tiles;\n  }\n}\n\nclass OamSize {\n  width: number;\n  height: number;\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n  }\n\n  total() {\n    return this.width * this.height;\n  }\n}\n\nconst oamSizes: OamSize[] = [\n  new OamSize(1, 1),\n  new OamSize(2, 2),\n  new OamSize(4, 4),\n  new OamSize(8, 8),\n  new OamSize(2, 1),\n  new OamSize(4, 1),\n  new OamSize(4, 2),\n  new OamSize(8, 2),\n  new OamSize(1, 2),\n  new OamSize(1, 4),\n  new OamSize(2, 4),\n  new OamSize(4, 8)\n];\n\ninterface Oam {\n  startTile: number;\n  offsetX: number;\n  offsetY: number;\n  size: OamSize;\n  hflip: boolean;\n  vflip: boolean;\n}\n\nclass Palette {\n  private array: any;\n\n  constructor(array: any) {\n    this.array = array;\n  }\n\n  value(index): number {\n    return this.array[index];\n  }\n\n  high(index): number[] {\n    const color = this.value(index);\n    const r = color & 0x1f;\n    const g = (color & 0x3e0) >> 5;\n    const b = (color & 0x7c00) >> 10;\n    return [r, g, b];\n  }\n\n  true(index): number[] {\n    return this.high(index).map(x => x * 8);\n  }\n}\n\nfunction toHex(value: number): string {\n  return value.toString(16);\n}\n\nfunction readSprite(data: Data, address: number): Frame[] {\n  const cursor = new DataReader(data);\n  cursor.setCursor(address);\n\n  cursor.read8();\n  cursor.read8(); // 0x00\n  cursor.read8(); // 0x01\n  const animationCount = cursor.read8();\n  \n  const animationPointers = new Array(animationCount);\n  const animations = new Array(animationCount);\n  const frames = new Array(256);\n\n  cursor.reset(address + 0x04, 0x00);\n\n  for (let i = 0; i < animationCount; i++) {\n    animationPointers[i] = cursor.read32();\n  }\n\n  for (let i = 0; i < animationCount; i++) {\n    cursor.setCursor(animationPointers[i]);\n    const tilemapPointer = cursor.read32();\n    const palettePointer = cursor.read32();\n    const ptr3 = cursor.read32();\n    const oamPointer = cursor.read32();\n    const animationDelay = cursor.read8();\n    cursor.read8(); // 0x00\n    const end = cursor.read8();\n    cursor.read8(); // 0x00\n\n    cursor.setCursor(tilemapPointer);\n    const tilemap = readTilemap(cursor);\n\n    cursor.setCursor(palettePointer);\n    const palette = readPalette(cursor);\n\n    cursor.setCursor(oamPointer);\n    const oams = readOams(cursor);\n\n    frames[i] = new Frame(tilemap, palette, oams);\n  }\n\n  return frames;\n}\n\nfunction readTilemap(reader: DataReader): Tilemap {\n  const size = reader.read32();\n  const tilesCount = size / 0x20; // 0x20 is the byte size of an 8x8 tile == 32 bytes\n  const tiles = new Array(tilesCount);\n\n  for (let i = 0; i < tilesCount; i++) {\n    // read a tile\n    const tile = new Array(64); // for convenience we're unpacking the bits\n    for (let i = 0; i < 0x20; i++) {\n      const byte = reader.read8();\n      const first = byte & 0x0f;\n      const second = (byte & 0xf0) >> 4;\n      tile[i*2] = first;\n      tile[i*2+1] = second;\n    }\n    tiles[i] = tile;\n  }\n\n  return new Tilemap(tiles);\n}\n\nfunction readPalette(reader: DataReader): Palette {\n  const size = reader.read32(); // always 0x20 == 32 bytes. 2 bytes per entry\n  const palette = new Array(16);\n\n  for (let i = 0; i < 16; i++) {\n    palette[i] = reader.read16();\n  }\n\n  return new Palette(palette);\n}\n\nfunction readOams(reader: DataReader): Oam[] {\n  const oams: Oam[] = [];\n  const start = reader.read32() - 4;\n\n  // skip enough bytes\n  for (let i = 0; i < start; i++) {\n    reader.read8();\n  }\n\n  while (true) {\n    const startTile = reader.read8();\n    const offsetX = reader.read8();\n    const offsetY = reader.read8();\n    const size = reader.read8();\n    const shape = reader.read8();\n\n    if (startTile === 0xff && offsetX === 0xff && offsetY === 0xff && size === 0xff && shape === 0xff) {\n      break;\n    }\n\n    const oamSize = oamSizes[((shape & 0x3) << 2) + (size & 0x3)];\n    const hflip = (size & 0x40) > 0;\n    const vflip = (size & 0x20) > 0;\n\n    const oam: Oam = {\n      startTile,\n      offsetX,\n      offsetY,\n      hflip,\n      vflip,\n      size: oamSize\n    };\n\n    oams.push(oam);\n  }\n\n  return oams;\n}\n\nclass SpriteExporter extends React.Component {\n  private canvasRef: React.RefObject<HTMLCanvasElement>;\n  private data: Data;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: null\n    };\n\n    this.canvasRef = React.createRef();\n\n    this.loadFile = this.loadFile.bind(this);\n    this.load = this.load.bind(this);\n    this.readSprite = this.readSprite.bind(this);\n  }\n\n  loadFile(event: ChangeEvent<HTMLInputElement>) {\n    console.log('loaded file');\n\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(event.target.files[0]);\n    reader.onloadend = (ev) => {\n      const array = new Uint8Array(ev.target.result as ArrayBuffer);\n      const data = new Data(array);\n      this.data = data;\n\n      this.load(0x3bf284);\n    };\n  }\n\n  load(address: number) {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const frames = readSprite(this.data, address);\n\n    frames.forEach((frame, f) => {\n      // frame.tilemap.tiles.forEach((tile, xi) => {\n      //   const imageData = ctx.getImageData(xi * 8, y * 8, 8, 8);\n      //   const palette = frame.palette;\n        // for (let p = 0; p < 64; p++) {\n        //   const bi = p * 4;\n        //   const color = palette.true(tile[p]);\n        //   imageData.data[bi] = color[0];\n        //   imageData.data[bi+1] = color[1];\n        //   imageData.data[bi+2] = color[2];\n        //   imageData.data[bi+3] = 0xff;\n        // }\n\n      //   ctx.putImageData(imageData, xi * 8, y * 8);\n      // });\n\n      const palette = frame.palette;\n\n      frame.oams.forEach((oam) => {\n        console.log(oam);\n        let tox = 0;\n        let toy = 0;\n\n        let x = 0, y = 0;\n        if (oam.offsetX <= 0x7f) {\n          x = 128 + oam.offsetX;\n        } else {\n          x = oam.offsetX - 128;\n        }\n\n        if (oam.offsetY <= 0x7f) {\n          y = 128 + oam.offsetY;\n        } else {\n          y = oam.offsetY - 128;\n        }\n\n        const canvasX = x + tox * 8 + (f % 8) * 64;\n        const canvasY = y + Math.floor(f / 8) * 64 + toy * 8;\n        const imageData = ctx.getImageData(canvasX, canvasY, oam.size.width * 8, oam.size.height * 8);\n\n        const pixels = new Array(oam.size.width * 8 * oam.size.height * 8);\n\n        for (let t = 0; t < oam.size.total(); t++) {\n          const tile = oam.startTile + t;\n\n          for (let ly = 0; ly < 8; ly++) {\n            for (let lx = 0; lx < 8; lx++) {\n              const i = ((toy * 8 + ly) * oam.size.width * 8 + (tox * 8 + lx));\n              const pi = frame.tilemap.tiles[tile][ly * 8 + lx];\n              if (pi !== 0) {\n                pixels[i] = palette.true(pi);\n              }\n            }\n          }\n\n          tox ++;\n          if (tox >= oam.size.width) {\n            toy ++;\n            tox = 0;\n          }\n        }\n\n        if (oam.hflip) {\n          const w = oam.size.width * 8;\n          for (let i = 0; i < oam.size.height * 8; i++) {\n            const offset = i * w;\n            for (let j = 0; j < w / 2; j++) {\n              const t = pixels[offset + j];\n              pixels[offset + j] = pixels[offset + (w - 1 - j)];\n              pixels[offset + (w - 1 - j)] = t;\n            }\n          }\n        }\n\n        for (let i = 0; i < pixels.length; i++) {\n          const idx = i * 4;\n          const pixel = pixels[i];\n          if (pixel) {\n            imageData.data[idx] = pixel[0];\n            imageData.data[idx+1] = pixel[1];\n            imageData.data[idx+2] = pixel[2];\n            imageData.data[idx+3] = 0xff;\n          }\n        }\n\n        ctx.putImageData(imageData, canvasX, canvasY);\n      });\n\n    });\n  }\n\n  readSprite(event) {\n    const value = event.target.value;\n    const address = this.data.read32(0x31ea8 + value * 4) & 0xffffff;\n\n    this.load(address);\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Sprite exporter</h2>\n        <input type=\"file\" onChange={this.loadFile} />\n        <input type=\"number\" onChange={this.readSprite} defaultValue={0} />\n        <canvas ref={this.canvasRef} width={8 * 128} height={8 * 64} />\n      </div>\n    );\n  }\n}\n\nexport default SpriteExporter;\n"],"sourceRoot":""}